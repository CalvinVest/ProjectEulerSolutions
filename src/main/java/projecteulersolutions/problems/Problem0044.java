package main.java.projecteulersolutions.problems;

import java.util.ArrayList;

/*
Pentagonal numbers are generated by the formula Pn = n(3n-1)/2. The first ten are:
1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference,
70 - 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference
are pentagonal and D = |Pk - Pj| is minimised; what is the value of D?
 */
@SuppressWarnings("unused")
public class Problem0044 extends Problem {

    @Override
    public boolean isSolved() {
        return true;
    }

    @Override
    public void printSolution() {
        System.out.println(getPentPairSolution());
    }
    
    private String getPentPairSolution() {
        // list to hold pentagon numbers
        ArrayList<Integer> pentList = new java.util.ArrayList<>();
        
        // for loop for every positive int, gets cut short with solution
        for(int i = 1; i > 0; i++) {
            // generate newest pentagon number
            int currPent = getPentagon(i);
            // for every already-found pentagon number in the list
            for(int p : pentList) {
                int diff = Math.abs(currPent - p);
                // if the sum and difference of the two considered pentagon numbers are themselves pentagonal
                if(isPentagonal(Math.abs(currPent + p)) && isPentagonal(diff)) {
                    // the difference of the two considered pentagon numbers is the solution
                    return p + " and " + currPent + " are a pentagonal pair.\nThe difference is " + diff + ".";
                }
            }
            // solution not yet found, add current pentagon number to list and repeat
            pentList.add(currPent);
        }
        // technically only reachable if loop iterator "i" overflows
        return "The solution was not found.";
    }

    private int getPentagon(int n) {
        // f(n) = n(3n-1)/2
        return n * (3 * n - 1) / 2;
    }

    private boolean isPentagonal(int p) {
        // n = (1 + sqrt(1 + 24[f(n)])/6
        return (1.0 + Math.sqrt(1 + 24 * p)) % 6 == 0;
    }
}
